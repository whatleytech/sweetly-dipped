---
description: Unified dependency management with package manager detection and library preferences
globs: ["**/*"]
alwaysApply: true
---

# Dependency Management

## Package Manager Detection & Usage

- **Detect package manager** by checking for **`yarn.lock`** or **`.yarnrc.yml`** at the repo root.  
- **Use consistent commands** based on detected package manager:
  • **Yarn**: `yarn add` / `yarn add -D` / `yarn remove` / `yarn up <pkg>@latest`
  • **npm**: `npm install` / `npm install -D` / `npm uninstall` / `npm update <pkg>@latest`
  • **pnpm**: `pnpm add` / `pnpm add -D` / `pnpm remove` / `pnpm update <pkg>@latest`
- **Never mix package managers** - use only the detected one for all operations
- **Script naming convention** (regardless of package manager):
  • `dev` → Vite dev server  
  • `build` → Vite production build  
  • `preview` → Vite preview server  
  • `test` → Vitest  
  • `lint` → eslint  
  • `type-check` → `tsc --noEmit`

## Yarn-Specific Rules

- If the repo is using **Yarn Berry** (presence of `.yarnrc.yml` with `packageExtensions` or `plugins`):
  • Use `yarn dlx` for one-off CLIs.  
  • Prefer **`npm:` protocol** for package aliases when needed (e.g., `yarn add eslint-config-airbnb@npm:eslint-config-airbnb@latest`).
- Any instructions, comments, or CI steps produced by Cursor must use Yarn syntax (e.g., `- run: yarn install --immutable` in GitHub Actions).

## Library Selection & Health Evaluation

- **Prefer proven libraries** over custom code when a well-maintained, battle-tested package exists. Examples:
  • Lodash for collection utilities  
  • date-fns or dayjs for date manipulation  
  • Zod or Yup for runtime validation  
  • React Hook Form for forms  
  • TanStack Query for server state
- **Evaluate library health**: ≥ 5k GitHub stars, recent commits (< 12 months), permissive license.
- **Wrap third-party code** behind a thin adapter when helpful to avoid vendor lock-in.

## Type Safety & Installation

- **Every new dependency** must be properly typed (use `@types/*` if needed)
- **Use latest stable versions** when adding dependencies
- **Maintain type safety** requirements across all package managers