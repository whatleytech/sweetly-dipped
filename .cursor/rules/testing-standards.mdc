---
description: Comprehensive testing standards including unit tests, coverage thresholds, and mobile responsive testing
globs: ["src/**/*.{ts,tsx,js,jsx}", "server/**/*.{ts,js}"]
alwaysApply: true
---

# Testing Standards

## Core Testing Requirements

### Framework & Tools
- **Framework**: Vitest with React Testing Library
- **Test Location**: Colocate tests next to source with `.test.ts[x]` suffix or in `__tests__/` mirroring folder structure
- **Mocking**: Mock external dependencies, APIs, and localStorage (e.g., Mock Service Worker, msw)

### Development Workflow
1. **TDD Approach**: Scaffold or update tests first before implementation
2. **Test Execution**: Run `yarn test` (or appropriate package manager command)
3. **Red State Prevention**: Never leave repo in failing test state - fix implementation before moving on
4. **Test Pyramid**: Lots of unit tests → handful of integration tests → smoke-level e2e test

## Coverage Thresholds

Minimum coverage requirements by file type:
- **Components** (`src/components/**/*.tsx`): 95%
- **Pages** (`src/pages/**/*.tsx`): 85% 
- **Utils/Helpers** (`src/utils/**/*.ts`): 100%
- **Hooks** (`src/hooks/**/*.ts`): 90%
- **API layers** (`src/api/**/*.ts`): 80%

## Test File Requirements

Every new or modified file must have a corresponding test:
- Components: `ComponentName.test.tsx` 
- Utils: `utilName.test.ts`
- Hooks: `useHookName.test.ts`
- Pages: `PageName.test.tsx`

## What to Test

### Components
- Rendering with default props
- All user interactions (clicks, form inputs, etc.)
- Conditional rendering logic
- Error states and edge cases
- Accessibility attributes (ARIA labels, roles)

### Utils/Helpers
- All function paths and branches
- Edge cases and error handling
- Input validation and sanitization
- Return value accuracy

### Hooks
- State changes and side effects
- Cleanup functions
- Error boundaries
- Dependency array behavior

## Testing Tools & Patterns

- **User interactions**: Use `fireEvent` or `userEvent` for realistic testing
- **Async testing**: Use `waitFor` for async state changes
- **Coverage**: `yarn test --coverage` must pass before commits

## Quality Gates

Before any commit:
1. `yarn test` - all tests pass
2. Coverage thresholds met per file type
3. No skipped tests without documented reason
4. No `console.log` or debugging code in tests

## Mobile Responsive Testing

### Required Breakpoints
- **Desktop**: 1024px+
- **Tablet**: 768px - 1023px  
- **Mobile Large**: 481px - 767px
- **Mobile Medium**: 421px - 480px
- **Mobile Small**: 320px - 420px

### CSS Overflow Prevention Patterns

```css
/* Container constraints */
.container {
  width: 100%;
  max-width: 100vw;
  box-sizing: border-box;
  overflow: hidden;
}

/* Mobile breakpoints */
@media (max-width: 767px) {
  .container {
    max-width: 100vw !important;
    padding: var(--spacing-sm);
  }
}

@media (max-width: 420px) {
  .container {
    padding: var(--spacing-xs);
  }
}
```

### Testing Checklist

Before committing mobile-responsive changes:
1. Test on iPhone 14 Pro Max (430px width)
2. Test on Pixel 7 (412px width) 
3. Test on Samsung Galaxy S8+ (360px width)
4. Test on iPhone SE (375px width)
5. Verify no horizontal scrollbars appear
6. Confirm text remains readable and not truncated
7. Check that interactive elements remain accessible

### Common Issues to Avoid

- **Grid overflow**: Use `grid-template-columns: repeat(auto-fit, minmax(80px, 1fr))` for flexible layouts
- **Text truncation**: Remove `text-overflow: ellipsis` and `white-space: nowrap` on mobile
- **Fixed widths**: Use `min-width: 0` and `max-width: 100%` for flexible elements
- **Padding issues**: Reduce padding on smaller screens with `!important` overrides when needed

### Implementation Rules

1. Always use `box-sizing: border-box` for consistent sizing
2. Apply `max-width: 100vw` to prevent viewport overflow
3. Use `overflow: hidden` on containers to prevent content spillover
4. Test with actual device dimensions, not just browser resizing
5. Document any device-specific workarounds in component comments

## Exceptions

The only exception to testing requirements:
- Theme/CSS variable files (like `src/types/colors.ts`)
- Configuration files
- Type-only definitions

Document any other exceptions in the test file with a comment explaining why.
