---
description: Comprehensive commit standards for size limits, messaging, quality gates, and workflow
globs: ["**/*"]
alwaysApply: true
---

# Commit Standards

## Commit Policy

1. **One cohesive task per commit** (e.g., "Add PackagesTable component" or "Fix TreatsGrid test")
2. **Keep diffs small**: ≤ 300 total lines changed per commit
3. **Ideal size**: 50-150 lines changed per commit
4. **Split large changes** into logical chunks (e.g., "add component" then "add tests" then "update integration")

## Commit Message Format

### Structure
```
<type>(scope): <subject>

[optional body]
```

### Type Prefixes
- `feat(scope):` - New feature or enhancement
- `fix(scope):` - Bug fix
- `chore(scope):` - Maintenance, deps, tooling
- `docs(scope):` - Documentation only
- `test(scope):` - Adding/updating tests only
- `refactor(scope):` - Code restructuring without feature changes
- `style(scope):` - Formatting, whitespace, code style

### Scope Guidelines
- **Component names**: `feat(hero): add responsive image gallery`
- **Feature areas**: `fix(forms): resolve validation timing issue`
- **Technical areas**: `chore(build): update vite config for testing`

### Subject Line Rules
- **Length**: 50-72 characters (hard limit: 100)
- **Style**: Imperative mood ("add", not "added" or "adds")
- **Capitalization**: Lowercase after colon
- **No period**: Don't end with `.`

### Examples
✅ Good:
- `feat(lead): add email/phone validation with live formatting`
- `fix(sidebar): correct step progress calculation`
- `chore(deps): update react router to v6.8`

❌ Bad:
- `Updated some files` (no type/scope, not descriptive)
- `feat: added a new component for the form validation and phone number formatting with tests` (too long)
- `Fix bug.` (not descriptive, has period)

## Grouping Strategy

Separate commits for:
1. **Core functionality** - the main feature implementation
2. **Tests** - comprehensive test coverage for the feature  
3. **Styling** - CSS/visual adjustments
4. **Documentation** - README updates, comments

Example sequence:
```bash
git commit -m "feat(package): add multi-step form with local storage"
git commit -m "test(package): add comprehensive form validation tests"  
git commit -m "style(package): refine form layout and responsive design"
git commit -m "docs(package): update README with form usage examples"
```

## Quality Gates

Run this checklist before every commit:
```bash
yarn lint        # ESLint passes
yarn type-check  # TypeScript compiles
yarn test        # All tests green  
yarn test --coverage  # Coverage thresholds met
```

If any step fails:
1. Fix the issue (code, tests, or config)
2. Re-run the checklist
3. Commit only when everything is green

## Tooling Setup

### Husky & lint-staged
Install/setup automatically if absent:
```bash
yarn add -D husky lint-staged
husky install
```

Add a "pre-commit" hook running the quality gate checklist.

### Coverage Integration
- Use Vitest's Istanbul integration
- Configure thresholds in `vitest.config.ts`
- Total coverage must be ≥ 80%

## CI Alignment

- GitHub Actions (or equivalent) must replicate the quality gate checklist
- Block pushes to `main` on failure
- Ensure consistent standards across all environments

Cursor must adhere to this workflow whenever it generates, edits, or removes code.
