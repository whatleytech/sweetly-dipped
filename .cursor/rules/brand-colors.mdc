---
description: Derive and enforce site color palette from the Sweetly Dipped logo
globs: ["src/**/*.{css,scss,sass,less,ts,tsx,jsx,js}"]
alwaysApply: true
---

Palette (names + HEX)
  • --sd-brown-dark:   #4b2e2b   /* Chocolate coating */
  • --sd-brown-light:  #6b433f   /* Drip highlight */
  • --sd-pink-base:    #ff66a0   /* Logo text pink */
  • --sd-pink-light:   #ffe6f1   /* Background tint */
  • --sd-cream:        #fffaf6   /* Frosting / negative space */
  • --sd-white:        #ffffff   /* Pure white for highest contrast */

Implementation rules
1. Declare these variables once in `src/assets/theme.css` (or equivalent global stylesheet) and export a TypeScript `BrandColors` map from `src/types/colors.ts` for autocomplete.
2. All new components **must** reference these variables via
     • CSS Modules: `color: var(--sd-pink-base);`
     • Styled-components or inline style objects: `var(--sd-pink-base)`
   Hard-coding HEX/RGB values is prohibited outside of a theme file (except for temporary debugging).
3. Accessible contrast: maintain ≥ 4.5 : 1 for body text and ≥ 3 : 1 for large headings/button text; use `--sd-cream` or `--sd-white` as foreground on dark brown backgrounds, and `--sd-brown-dark` as text over light pink.
4. Accent colors (e.g., gold) from earlier specs may still be used **only** if they harmonize—provide an alias like `--sd-gold-accent` and verify contrast.
5. Any new shade requires updating this palette and passing the contrast rules above.
6. Add a Vitest unit test (`theme.test.ts`) that:
   • Imports the CSS variables via JS (e.g., `await import('@/assets/theme.css?inline')`)  
   • Asserts that every key variable is defined.
7. Design tools or Figma tokens must match these HEX values to avoid drift.

Cursor must enforce these constraints whenever generating or modifying styles, components, or documentation.