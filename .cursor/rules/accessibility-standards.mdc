---
description: Enforce accessibility standards including ARIA, keyboard navigation, screen reader compatibility, and WCAG 2.1 AA compliance
globs: ["src/**/*.{tsx,ts}", "**/*.test.{ts,tsx}"]
alwaysApply: true
---

# Accessibility Standards

## Core Accessibility Principles

1. **WCAG 2.1 AA Compliance** - Meet or exceed Web Content Accessibility Guidelines
2. **Progressive Enhancement** - Core functionality works without JavaScript
3. **Semantic HTML First** - Use proper HTML elements before ARIA
4. **Keyboard Accessible** - All functionality available via keyboard
5. **Screen Reader Compatible** - Test with actual screen readers
6. **Color Independent** - Information not conveyed by color alone

## ARIA Implementation Patterns

### Required ARIA Attributes for Interactive Elements

#### Buttons
```tsx
// Standard button
<button 
  type="button"
  aria-label="Close dialog"
  aria-describedby="dialog-description"
>
  <CloseIcon aria-hidden="true" />
</button>

// Toggle button
<button 
  type="button"
  aria-pressed={isExpanded}
  aria-expanded={isExpanded}
  aria-controls="expandable-content"
>
  {isExpanded ? 'Collapse' : 'Expand'}
</button>
```

#### Form Controls
```tsx
// Input with error
<input
  type="text"
  id="username"
  aria-invalid={hasError}
  aria-describedby={hasError ? "username-error" : "username-help"}
  aria-required="true"
/>

// Select with description
<select 
  id="country"
  aria-describedby="country-help"
  aria-required="true"
>
  <option value="">Select country</option>
</select>
```

#### Navigation
```tsx
// Main navigation
<nav aria-label="Main navigation">
  <ul role="menubar">
    <li role="none">
      <a href="/home" role="menuitem" aria-current={currentPage === 'home' ? 'page' : undefined}>
        Home
      </a>
    </li>
  </ul>
</nav>

// Breadcrumb
<nav aria-label="Breadcrumb">
  <ol>
    <li><a href="/">Home</a></li>
    <li><a href="/products">Products</a></li>
    <li aria-current="page">Current Page</li>
  </ol>
</nav>
```

### ARIA Live Regions for Dynamic Content

```tsx
// Status updates
<div 
  role="status" 
  aria-live="polite" 
  aria-atomic="true"
  className="sr-only"
>
  {statusMessage}
</div>

// Error announcements
<div 
  role="alert" 
  aria-live="assertive" 
  aria-atomic="true"
>
  {errorMessage}
</div>

// Progress updates
<div 
  role="progressbar"
  aria-valuenow={progress}
  aria-valuemin={0}
  aria-valuemax={100}
  aria-label="Loading progress"
>
  {progress}% complete
</div>
```

### ARIA Labels and Descriptions

```tsx
// Complex form field
<div className="field-group">
  <label htmlFor="password">
    Password
    <span className="required" aria-label="required">*</span>
  </label>
  <input
    type="password"
    id="password"
    aria-describedby="password-help password-requirements"
    aria-required="true"
  />
  <div id="password-help" className="help-text">
    Password must be at least 8 characters
  </div>
  <div id="password-requirements" className="sr-only">
    Password must contain uppercase, lowercase, number, and special character
  </div>
</div>
```

### ARIA Roles and States

```tsx
// Modal dialog
<div 
  role="dialog"
  aria-modal="true"
  aria-labelledby="dialog-title"
  aria-describedby="dialog-description"
>
  <h2 id="dialog-title">Confirm Action</h2>
  <p id="dialog-description">Are you sure you want to delete this item?</p>
</div>

// Tab panel
<div role="tabpanel" aria-labelledby="tab-1" id="panel-1">
  Tab content
</div>

// Accordion
<div role="region" aria-labelledby="accordion-heading">
  <button 
    id="accordion-heading"
    aria-expanded={isOpen}
    aria-controls="accordion-content"
  >
    Section Title
  </button>
  <div 
    id="accordion-content"
    aria-hidden={!isOpen}
  >
    Content
  </div>
</div>
```

## Keyboard Navigation Standards

### Tab Order Requirements

1. **Logical Tab Sequence** - Follow visual layout and reading order
2. **Skip Links** - Provide skip to main content links
3. **Focus Indicators** - Visible focus outline on all interactive elements
4. **Tab Trapping** - Trap focus within modals and overlays

### Skip Links Implementation

```tsx
// Skip to main content
<a 
  href="#main-content" 
  className="skip-link"
  onFocus={(e) => e.target.style.display = 'block'}
  onBlur={(e) => e.target.style.display = 'none'}
>
  Skip to main content
</a>

// Skip to navigation
<a 
  href="#main-navigation" 
  className="skip-link"
>
  Skip to navigation
</a>
```

### Keyboard Shortcuts

```tsx
// Custom keyboard shortcuts
useEffect(() => {
  const handleKeyDown = (event: KeyboardEvent) => {
    if (event.ctrlKey || event.metaKey) {
      switch (event.key) {
        case 'k':
          event.preventDefault();
          openSearch();
          break;
        case '/':
          event.preventDefault();
          openHelp();
          break;
      }
    }
  };

  document.addEventListener('keydown', handleKeyDown);
  return () => document.removeEventListener('keydown', handleKeyDown);
}, []);
```

### Focus Trap Implementation

```tsx
// Focus trap hook
const useFocusTrap = (isActive: boolean) => {
  const containerRef = useRef<HTMLElement>(null);
  
  useEffect(() => {
    if (!isActive || !containerRef.current) return;
    
    const focusableElements = containerRef.current.querySelectorAll(
      'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
    );
    
    const firstElement = focusableElements[0] as HTMLElement;
    const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement;
    
    const handleTabKey = (e: KeyboardEvent) => {
      if (e.key !== 'Tab') return;
      
      if (e.shiftKey) {
        if (document.activeElement === firstElement) {
          e.preventDefault();
          lastElement.focus();
        }
      } else {
        if (document.activeElement === lastElement) {
          e.preventDefault();
          firstElement.focus();
        }
      }
    };
    
    document.addEventListener('keydown', handleTabKey);
    firstElement?.focus();
    
    return () => document.removeEventListener('keydown', handleTabKey);
  }, [isActive]);
  
  return containerRef;
};
```

## Screen Reader Testing Requirements

### Required Testing Tools

1. **axe-core** - Automated accessibility testing
2. **jest-axe** - Unit test accessibility
3. **@testing-library/jest-dom** - Accessibility matchers
4. **Manual Testing** - Actual screen reader testing

### Automated Testing Setup

```tsx
// jest-axe setup
import { toHaveNoViolations } from 'jest-axe';
import { render } from '@testing-library/react';

expect.extend(toHaveNoViolations);

// Component accessibility test
test('should not have accessibility violations', async () => {
  const { container } = render(<MyComponent />);
  const results = await axe(container);
  expect(results).toHaveNoViolations();
});
```

### Screen Reader Testing Scenarios

#### Common Interactions to Test

1. **Form Navigation** - Tab through form fields and hear labels
2. **Button Actions** - Activate buttons and hear feedback
3. **Dynamic Content** - Hear live region announcements
4. **Error States** - Hear error messages and validation
5. **Modal Dialogs** - Navigate and close modals
6. **Data Tables** - Navigate table headers and cells

#### Testing Checklist

- [ ] All interactive elements are focusable
- [ ] Focus indicators are visible
- [ ] Screen reader announces all content correctly
- [ ] Form labels are associated with inputs
- [ ] Error messages are announced
- [ ] Dynamic content updates are announced
- [ ] Skip links work correctly
- [ ] Modal focus trapping works
- [ ] Keyboard shortcuts are documented

### Screen Reader Compatibility

#### Supported Screen Readers

1. **NVDA** (Windows) - Free, open source
2. **JAWS** (Windows) - Commercial
3. **VoiceOver** (macOS/iOS) - Built-in
4. **TalkBack** (Android) - Built-in
5. **Orca** (Linux) - Free, open source

#### Testing Requirements

- Test with at least 2 different screen readers
- Test on both desktop and mobile
- Verify with different browsers
- Test with keyboard-only navigation

## Focus Management Patterns

### Focus Restoration

```tsx
// Restore focus after modal closes
const useFocusRestoration = () => {
  const previousActiveElement = useRef<HTMLElement | null>(null);
  
  const saveFocus = () => {
    previousActiveElement.current = document.activeElement as HTMLElement;
  };
  
  const restoreFocus = () => {
    if (previousActiveElement.current) {
      previousActiveElement.current.focus();
    }
  };
  
  return { saveFocus, restoreFocus };
};
```

### Focus Indicators

```css
/* Visible focus indicators */
*:focus {
  outline: 2px solid var(--sd-pink-base);
  outline-offset: 2px;
}

/* Custom focus styles */
.button:focus-visible {
  outline: 2px solid var(--sd-pink-base);
  outline-offset: 2px;
  box-shadow: 0 0 0 4px rgba(255, 102, 160, 0.2);
}

/* Remove default outline only when custom is provided */
.button:focus:not(:focus-visible) {
  outline: none;
}
```

### Focus Management in Modals

```tsx
// Modal focus management
const Modal = ({ isOpen, onClose, children }) => {
  const modalRef = useFocusTrap(isOpen);
  const { saveFocus, restoreFocus } = useFocusRestoration();
  
  useEffect(() => {
    if (isOpen) {
      saveFocus();
    } else {
      restoreFocus();
    }
  }, [isOpen, saveFocus, restoreFocus]);
  
  if (!isOpen) return null;
  
  return (
    <div 
      className="modal-overlay"
      onClick={onClose}
      role="presentation"
    >
      <div 
        ref={modalRef}
        className="modal-content"
        role="dialog"
        aria-modal="true"
        onClick={(e) => e.stopPropagation()}
      >
        {children}
      </div>
    </div>
  );
};
```

## Accessibility Testing Standards

### Automated Testing Requirements

#### Unit Tests
```tsx
// Test ARIA attributes
test('button has correct ARIA attributes', () => {
  render(<ToggleButton isExpanded={false} />);
  
  const button = screen.getByRole('button');
  expect(button).toHaveAttribute('aria-expanded', 'false');
  expect(button).toHaveAttribute('aria-controls', 'content');
});

// Test keyboard navigation
test('supports keyboard navigation', async () => {
  const user = userEvent.setup();
  render(<NavigationMenu />);
  
  const firstLink = screen.getByRole('link', { name: 'Home' });
  await user.tab();
  expect(firstLink).toHaveFocus();
});
```

#### Integration Tests
```tsx
// Test complete user flows
test('complete form submission flow is accessible', async () => {
  const user = userEvent.setup();
  render(<ContactForm />);
  
  // Navigate through form
  await user.tab();
  await user.type(screen.getByLabelText(/name/i), 'John Doe');
  
  await user.tab();
  await user.type(screen.getByLabelText(/email/i), 'john@example.com');
  
  // Submit form
  await user.tab();
  await user.click(screen.getByRole('button', { name: /submit/i }));
  
  // Verify success message
  await waitFor(() => {
    expect(screen.getByRole('status')).toHaveTextContent('Form submitted successfully');
  });
});
```

### Manual Testing Checklist

#### Pre-Release Accessibility Audit

- [ ] **Keyboard Navigation**
  - [ ] All interactive elements are keyboard accessible
  - [ ] Tab order is logical and intuitive
  - [ ] Focus indicators are visible
  - [ ] Skip links work correctly
  - [ ] Modal focus trapping works

- [ ] **Screen Reader Testing**
  - [ ] All content is announced correctly
  - [ ] Form labels are associated with inputs
  - [ ] Error messages are announced
  - [ ] Dynamic content updates are announced
  - [ ] Navigation landmarks are identified

- [ ] **Visual Accessibility**
  - [ ] Color contrast meets WCAG AA standards (4.5:1)
  - [ ] Information is not conveyed by color alone
  - [ ] Text is readable at 200% zoom
  - [ ] Interactive elements have sufficient touch targets (44px minimum)

- [ ] **Content Accessibility**
  - [ ] Headings form a logical hierarchy
  - [ ] Images have descriptive alt text
  - [ ] Links have descriptive text
  - [ ] Tables have proper headers
  - [ ] Form fields have labels

### WCAG 2.1 AA Compliance

#### Level A Requirements
- [ ] Non-text content has text alternatives
- [ ] Captions provided for prerecorded audio
- [ ] Information and relationships are preserved
- [ ] Meaning is not conveyed through sensory characteristics alone

#### Level AA Requirements
- [ ] Color contrast ratio of at least 4.5:1 for normal text
- [ ] Color contrast ratio of at least 3:1 for large text
- [ ] Text can be resized up to 200% without loss of functionality
- [ ] No content flashes more than 3 times per second
- [ ] Multiple ways to locate web pages
- [ ] Headings and labels describe topic or purpose

### Accessibility Audit Tools

#### Automated Tools
```bash
# Install accessibility testing tools
yarn add -D @axe-core/react jest-axe @testing-library/jest-dom

# Run accessibility tests
yarn test --testNamePattern="accessibility"

# Run axe-core in development
yarn add -D @axe-core/react
```

#### Manual Testing Tools
- **axe DevTools** - Browser extension for accessibility testing
- **WAVE** - Web accessibility evaluation tool
- **Lighthouse** - Built-in Chrome accessibility audit
- **Color Contrast Analyzer** - Verify color contrast ratios

## Implementation Rules

1. **Accessibility First** - Consider accessibility from the start of development
2. **Test Early and Often** - Run accessibility tests with every build
3. **Manual Testing Required** - Automated tools catch ~30% of issues
4. **User Testing** - Test with actual users with disabilities
5. **Documentation** - Document accessibility features and keyboard shortcuts
6. **Training** - Ensure team understands accessibility principles
7. **Continuous Monitoring** - Regular accessibility audits and testing

## Common Accessibility Patterns

### Screen Reader Only Content
```css
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}
```

### High Contrast Mode Support
```css
@media (prefers-contrast: high) {
  .button {
    border: 2px solid currentColor;
  }
  
  .link {
    text-decoration: underline;
  }
}
```

### Reduced Motion Support
```css
@media (prefers-reduced-motion: reduce) {
  * {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }
}
```

## Quality Gates

Before any commit:
1. `yarn test` - all accessibility tests pass
2. `yarn lint` - no accessibility linting errors
3. Manual keyboard navigation test
4. Screen reader testing on at least one platform
5. Color contrast verification
6. Focus indicator visibility check

## Exceptions

The only exceptions to accessibility requirements:
- Third-party components that cannot be modified (document workarounds)
- Legacy code being actively refactored (temporary exception with timeline)
- Experimental features in development (must be accessible before release)

Document any exceptions with:
- Reason for exception
- Timeline for resolution
- Workaround for users
- Alternative accessible solution if available